// DevSpaces Image Builder Pipeline
// Builds udi-plus base image and all derived images sequentially
// Can be split into separate pipelines later if needed

pipeline {
    agent {
        kubernetes {
            cloud 'kubernetes'
            yaml '''
apiVersion: v1
kind: Pod
spec:
  serviceAccount: jenkins-deployer
  nodeSelector:
    node-type: edge
  volumes:
    - name: containerd-sock
      hostPath:
        path: /var/snap/microk8s/common/run/containerd.sock
        type: Socket
    - name: buildkit-run
      emptyDir: {}
  containers:
    - name: builder
      image: harbor.ethosengine.com/ethosengine/ci-builder:latest
      command:
        - cat
      tty: true
      resources:
        requests:
          ephemeral-storage: "2Gi"
        limits:
          ephemeral-storage: "4Gi"
      volumeMounts:
        - name: containerd-sock
          mountPath: /run/containerd/containerd.sock
        - name: buildkit-run
          mountPath: /run/buildkit
    - name: buildkitd
      image: moby/buildkit:v0.12.5
      securityContext:
        privileged: true
      args:
        - --addr
        - unix:///run/buildkit/buildkitd.sock
        - --oci-worker=true
        - --containerd-worker=false
      volumeMounts:
        - name: containerd-sock
          mountPath: /run/containerd/containerd.sock
        - name: buildkit-run
          mountPath: /run/buildkit
'''
        }
    }

    parameters {
        booleanParam(name: 'BUILD_CI_BUILDER', defaultValue: true,
                     description: 'Build ci-builder image (used by this pipeline)')
        booleanParam(name: 'BUILD_UDI_PLUS', defaultValue: true,
                     description: 'Build udi-plus base image')
        booleanParam(name: 'BUILD_RUST', defaultValue: true,
                     description: 'Build rust-nix-dev image')
        booleanParam(name: 'BUILD_ANGULAR', defaultValue: true,
                     description: 'Build udi-plus-angular image')
        booleanParam(name: 'BUILD_GAE', defaultValue: true,
                     description: 'Build udi-plus-gae image')
        booleanParam(name: 'FORCE_BUILD', defaultValue: true,
                     description: 'Force rebuild even if no updates to base image')
        booleanParam(name: 'SKIP_PUSH', defaultValue: false,
                     description: 'Skip pushing images to Harbor (for testing builds only)')
        booleanParam(name: 'SKIP_SECURITY_SCAN', defaultValue: false,
                     description: 'Skip Harbor security scanning')
        booleanParam(name: 'SKIP_SMOKE_TESTS', defaultValue: false,
                     description: 'Skip container smoke tests')
    }

    environment {
        REGISTRY = 'harbor.ethosengine.com/devspaces'
        CI_BUILDER_REGISTRY = 'harbor.ethosengine.com/ethosengine'
        BASE_IMAGE = 'quay.io/devfile/universal-developer-image:ubi9-latest'
    }

    stages {
        stage('Checkout') {
            steps {
                container('builder') {
                    script {
                        checkout scm

                        // Ensure clean git state
                        sh 'git config --global --add safe.directory $(pwd)'
                        sh 'git clean -fdx'
                        sh 'git reset --hard HEAD'

                        echo "Building from branch: ${env.BRANCH_NAME ?: 'main'}"

                        // Verify git state
                        sh 'git rev-parse --short HEAD'
                        sh 'git status'
                    }
                }
            }
        }

        stage('Setup') {
            steps {
                container('builder') {
                    script {
                        echo "=== Build Configuration ==="
                        echo "Build ci-builder: ${params.BUILD_CI_BUILDER}"
                        echo "Build udi-plus: ${params.BUILD_UDI_PLUS}"
                        echo "Build rust-nix-dev: ${params.BUILD_RUST}"
                        echo "Build angular: ${params.BUILD_ANGULAR}"
                        echo "Build GAE: ${params.BUILD_GAE}"
                        echo "Force build: ${params.FORCE_BUILD}"

                        // Generate tags
                        def datestamp = sh(script: 'date +%Y-%m-%d', returnStdout: true).trim()
                        def gitHash = sh(script: 'git rev-parse --short HEAD', returnStdout: true).trim()

                        env.IMAGE_TAG_LATEST = 'latest'
                        env.IMAGE_TAG_DATED = datestamp
                        env.IMAGE_TAG_GIT = gitHash
                        env.GIT_HASH = gitHash

                        echo "=== Image Tags ==="
                        echo "Latest: ${env.IMAGE_TAG_LATEST}"
                        echo "Dated: ${env.IMAGE_TAG_DATED}"
                        echo "Git hash: ${env.IMAGE_TAG_GIT}"

                        // Initialize IMAGES_BUILT tracker
                        env.IMAGES_BUILT = ''

                        // Check if base image has updates
                        if (params.BUILD_UDI_PLUS && !params.FORCE_BUILD) {
                            echo "Checking for updates to base image: ${env.BASE_IMAGE}"

                            // Get current image ID (if exists)
                            def currentImageId = sh(
                                script: "nerdctl -n k8s.io images -q ${env.BASE_IMAGE} 2>/dev/null || echo 'none'",
                                returnStdout: true
                            ).trim()

                            echo "Current image ID: ${currentImageId}"

                            sh "nerdctl -n k8s.io pull ${env.BASE_IMAGE}"

                            // Get new image ID after pull
                            def newImageId = sh(
                                script: "nerdctl -n k8s.io images -q ${env.BASE_IMAGE}",
                                returnStdout: true
                            ).trim()

                            echo "New image ID: ${newImageId}"

                            if (currentImageId == newImageId && currentImageId != 'none') {
                                echo "⚠️  No updates to base image detected"
                                echo "Set FORCE_BUILD=true to rebuild anyway"
                                env.SKIP_UDI_PLUS_BUILD = 'true'
                            } else {
                                echo "✅ Base image has updates, proceeding with build"
                                env.SKIP_UDI_PLUS_BUILD = 'false'
                            }
                        } else {
                            echo "DEBUG: Skipping base image check (BUILD_UDI_PLUS=${params.BUILD_UDI_PLUS}, FORCE_BUILD=${params.FORCE_BUILD})"
                            env.SKIP_UDI_PLUS_BUILD = 'false'
                        }

                        echo "DEBUG: Final SKIP_UDI_PLUS_BUILD = ${env.SKIP_UDI_PLUS_BUILD}"

                        // Verify BuildKit
                        sh 'buildctl --addr unix:///run/buildkit/buildkitd.sock debug workers'
                    }
                }
            }
        }

        stage('Build ci-builder') {
            when {
                expression { params.BUILD_CI_BUILDER }
            }
            steps {
                container('builder') {
                    script {
                        echo "=== Building ci-builder image ==="

                        sh """#!/bin/bash
                            set -euo pipefail

                            # Verify BuildKit
                            buildctl --addr unix:///run/buildkit/buildkitd.sock debug workers > /dev/null

                            # Create build context
                            mkdir -p /tmp/build-context/ci-builder
                            cp -r containers/ci-builder/* /tmp/build-context/ci-builder/

                            # Build image
                            cd /tmp/build-context/ci-builder
                            BUILDKIT_HOST=unix:///run/buildkit/buildkitd.sock \\
                              nerdctl -n k8s.io build \\
                                --no-cache \\
                                -t ${CI_BUILDER_REGISTRY}/ci-builder:${IMAGE_TAG_LATEST} \\
                                -t ${CI_BUILDER_REGISTRY}/ci-builder:${IMAGE_TAG_DATED} \\
                                -t ${CI_BUILDER_REGISTRY}/ci-builder:${IMAGE_TAG_GIT} \\
                                .
                        """

                        // Verify image actually exists
                        def imageExists = sh(script: "nerdctl -n k8s.io images -q ${CI_BUILDER_REGISTRY}/ci-builder:${IMAGE_TAG_DATED}", returnStdout: true).trim()
                        if (!imageExists) {
                            error("❌ VERIFICATION FAILED: ci-builder image not found after build")
                        }

                        env.IMAGES_BUILT = (env.IMAGES_BUILT ?: '') + "ci-builder:${env.IMAGE_TAG_DATED},"
                        echo "✅ ci-builder image built and verified"
                        echo "DEBUG: IMAGES_BUILT after ci-builder build: '${env.IMAGES_BUILT}'"
                    }
                }
            }
        }

        stage('Test ci-builder') {
            when {
                expression { params.BUILD_CI_BUILDER && !params.SKIP_SMOKE_TESTS }
            }
            steps {
                container('builder') {
                    script {
                        echo "=== Testing ci-builder image ==="

                        sh """#!/bin/bash
                            set -euo pipefail

                            # Verify image exists
                            echo "Verifying image exists..."
                            nerdctl -n k8s.io images | grep "${CI_BUILDER_REGISTRY}/ci-builder" | grep "${IMAGE_TAG_DATED}"
                            echo "✅ Image built successfully"
                            echo "⚠️  Skipping container smoke tests (nested containerization not supported in Jenkins pod)"
                        """

                        echo "✅ ci-builder smoke tests passed"
                    }
                }
            }
        }

        stage('Build udi-plus') {
            when {
                beforeAgent true
                expression {
                    echo "DEBUG Build udi-plus when: BUILD_UDI_PLUS=${params.BUILD_UDI_PLUS}, SKIP_UDI_PLUS_BUILD=${env.SKIP_UDI_PLUS_BUILD}"
                    return params.BUILD_UDI_PLUS && env.SKIP_UDI_PLUS_BUILD != 'true'
                }
            }
            steps {
                container('builder') {
                    script {
                        echo "=== Building udi-plus base image ==="

                        sh """#!/bin/bash
                            set -euo pipefail

                            # Verify BuildKit
                            buildctl --addr unix:///run/buildkit/buildkitd.sock debug workers > /dev/null

                            # Create build context
                            mkdir -p /tmp/build-context/udi-plus
                            cp -r containers/udi-plus/* /tmp/build-context/udi-plus/

                            # Build image
                            cd /tmp/build-context/udi-plus
                            BUILDKIT_HOST=unix:///run/buildkit/buildkitd.sock \\
                              nerdctl -n k8s.io build \\
                                --no-cache \\
                                -t ${REGISTRY}/udi-plus:${IMAGE_TAG_LATEST} \\
                                -t ${REGISTRY}/udi-plus:${IMAGE_TAG_DATED} \\
                                -t ${REGISTRY}/udi-plus:${IMAGE_TAG_GIT} \\
                                .
                        """

                        // Verify image actually exists
                        def imageExists = sh(script: "nerdctl -n k8s.io images -q ${REGISTRY}/udi-plus:${IMAGE_TAG_DATED}", returnStdout: true).trim()
                        if (!imageExists) {
                            error("❌ VERIFICATION FAILED: udi-plus image not found after build")
                        }

                        env.IMAGES_BUILT = (env.IMAGES_BUILT ?: '') + "udi-plus:${env.IMAGE_TAG_DATED},"
                        echo "✅ udi-plus image built and verified"
                        echo "DEBUG: IMAGES_BUILT after udi-plus build: '${env.IMAGES_BUILT}'"
                    }
                }
            }
        }

        stage('Test udi-plus') {
            when {
                expression {
                    params.BUILD_UDI_PLUS &&
                    env.SKIP_UDI_PLUS_BUILD != 'true' &&
                    !params.SKIP_SMOKE_TESTS
                }
            }
            steps {
                container('builder') {
                    script {
                        echo "=== Testing udi-plus image ==="

                        sh """#!/bin/bash
                            set -euo pipefail

                            # Verify image exists
                            echo "Verifying image exists..."
                            nerdctl -n k8s.io images | grep "${REGISTRY}/udi-plus" | grep "${IMAGE_TAG_DATED}"
                            echo "✅ Image built successfully"
                            echo "⚠️  Skipping container smoke tests (nested containerization not supported in Jenkins pod)"
                        """

                        echo "✅ udi-plus smoke tests passed"
                    }
                }
            }
        }

        stage('Build rust-nix-dev') {
            when {
                expression { params.BUILD_RUST }
            }
            steps {
                container('builder') {
                    script {
                        echo "=== Building rust-nix-dev image ==="

                        // Update Dockerfile to use dated tag if udi-plus was just built
                        def baseTag = (params.BUILD_UDI_PLUS && env.SKIP_UDI_PLUS_BUILD != 'true') ?
                                      env.IMAGE_TAG_DATED : 'latest'

                        echo "Using base image tag: ${baseTag}"

                        sh """#!/bin/bash
                            set -euo pipefail

                            # Verify BuildKit
                            buildctl --addr unix:///run/buildkit/buildkitd.sock debug workers > /dev/null

                            # Create build context
                            mkdir -p /tmp/build-context/rust-dev
                            cp -r containers/rust-dev/* /tmp/build-context/rust-dev/

                            # Build image
                            cd /tmp/build-context/rust-dev
                            BUILDKIT_HOST=unix:///run/buildkit/buildkitd.sock \\
                              nerdctl -n k8s.io build \\
                                --build-arg BASE_TAG=${baseTag} \\
                                -t ${REGISTRY}/rust-nix-dev:${IMAGE_TAG_LATEST} \\
                                -t ${REGISTRY}/rust-nix-dev:${IMAGE_TAG_DATED} \\
                                -t ${REGISTRY}/rust-nix-dev:${IMAGE_TAG_GIT} \\
                                .
                        """

                        env.IMAGES_BUILT = (env.IMAGES_BUILT ?: '') + "rust-nix-dev:${env.IMAGE_TAG_DATED},"
                        echo "✅ rust-nix-dev image built successfully"
                        echo "DEBUG: IMAGES_BUILT after rust-nix-dev build: '${env.IMAGES_BUILT}'"
                    }
                }
            }
        }

        stage('Test rust-nix-dev') {
            when {
                expression { params.BUILD_RUST && !params.SKIP_SMOKE_TESTS }
            }
            steps {
                container('builder') {
                    script {
                        echo "=== Testing rust-nix-dev image ==="

                        sh """#!/bin/bash
                            set -euo pipefail

                            # Verify image exists
                            echo "Verifying image exists..."
                            nerdctl -n k8s.io images | grep "${REGISTRY}/rust-nix-dev" | grep "${IMAGE_TAG_DATED}"
                            echo "✅ Image built successfully"
                            echo "⚠️  Skipping container smoke tests (nested containerization not supported in Jenkins pod)"
                        """

                        echo "✅ rust-nix-dev smoke tests passed"
                    }
                }
            }
        }

        stage('Build udi-plus-angular') {
            when {
                expression { params.BUILD_ANGULAR }
            }
            steps {
                container('builder') {
                    script {
                        echo "=== Building udi-plus-angular image ==="

                        def baseTag = (params.BUILD_UDI_PLUS && env.SKIP_UDI_PLUS_BUILD != 'true') ?
                                      env.IMAGE_TAG_DATED : 'latest'

                        echo "Using base image tag: ${baseTag}"

                        sh """#!/bin/bash
                            set -euo pipefail

                            # Verify BuildKit
                            buildctl --addr unix:///run/buildkit/buildkitd.sock debug workers > /dev/null

                            # Create build context
                            mkdir -p /tmp/build-context/udi-plus-angular
                            cp -r containers/udi-plus/udi-plus-angular/* /tmp/build-context/udi-plus-angular/

                            # Build image
                            cd /tmp/build-context/udi-plus-angular
                            BUILDKIT_HOST=unix:///run/buildkit/buildkitd.sock \\
                              nerdctl -n k8s.io build \\
                                --build-arg BASE_TAG=${baseTag} \\
                                -t ${REGISTRY}/udi-plus-angular:${IMAGE_TAG_LATEST} \\
                                -t ${REGISTRY}/udi-plus-angular:${IMAGE_TAG_DATED} \\
                                -t ${REGISTRY}/udi-plus-angular:${IMAGE_TAG_GIT} \\
                                .
                        """

                        env.IMAGES_BUILT = (env.IMAGES_BUILT ?: '') + "udi-plus-angular:${env.IMAGE_TAG_DATED},"
                        echo "✅ udi-plus-angular image built successfully"
                        echo "DEBUG: IMAGES_BUILT after udi-plus-angular build: '${env.IMAGES_BUILT}'"
                    }
                }
            }
        }

        stage('Test udi-plus-angular') {
            when {
                expression { params.BUILD_ANGULAR && !params.SKIP_SMOKE_TESTS }
            }
            steps {
                container('builder') {
                    script {
                        echo "=== Testing udi-plus-angular image ==="

                        sh """#!/bin/bash
                            set -euo pipefail

                            # Verify image exists
                            echo "Verifying image exists..."
                            nerdctl -n k8s.io images | grep "${REGISTRY}/udi-plus-angular" | grep "${IMAGE_TAG_DATED}"
                            echo "✅ Image built successfully"
                            echo "⚠️  Skipping container smoke tests (nested containerization not supported in Jenkins pod)"
                        """

                        echo "✅ udi-plus-angular smoke tests passed"
                    }
                }
            }
        }

        stage('Build udi-plus-gae') {
            when {
                expression { params.BUILD_GAE }
            }
            steps {
                container('builder') {
                    script {
                        echo "=== Building udi-plus-gae image ==="
                        echo "⚠️  This build takes 15-20 minutes due to Python 2.7 compilation"

                        def baseTag = (params.BUILD_UDI_PLUS && env.SKIP_UDI_PLUS_BUILD != 'true') ?
                                      env.IMAGE_TAG_DATED : 'latest'

                        echo "Using base image tag: ${baseTag}"

                        sh """#!/bin/bash
                            set -euo pipefail

                            # Verify BuildKit
                            buildctl --addr unix:///run/buildkit/buildkitd.sock debug workers > /dev/null

                            # Create build context
                            mkdir -p /tmp/build-context/udi-plus-gae
                            cp -r containers/udi-plus/udi-plus-gae/* /tmp/build-context/udi-plus-gae/

                            # Build image
                            cd /tmp/build-context/udi-plus-gae
                            BUILDKIT_HOST=unix:///run/buildkit/buildkitd.sock \\
                              nerdctl -n k8s.io build \\
                                --build-arg BASE_TAG=${baseTag} \\
                                -t ${REGISTRY}/udi-plus-gae:${IMAGE_TAG_LATEST} \\
                                -t ${REGISTRY}/udi-plus-gae:${IMAGE_TAG_DATED} \\
                                -t ${REGISTRY}/udi-plus-gae:${IMAGE_TAG_GIT} \\
                                .
                        """

                        env.IMAGES_BUILT = (env.IMAGES_BUILT ?: '') + "udi-plus-gae:${env.IMAGE_TAG_DATED},"
                        echo "✅ udi-plus-gae image built successfully"
                        echo "DEBUG: IMAGES_BUILT after udi-plus-gae build: '${env.IMAGES_BUILT}'"
                    }
                }
            }
        }

        stage('Test udi-plus-gae') {
            when {
                expression { params.BUILD_GAE && !params.SKIP_SMOKE_TESTS }
            }
            steps {
                container('builder') {
                    script {
                        echo "=== Testing udi-plus-gae image ==="

                        sh """#!/bin/bash
                            set -euo pipefail

                            # Verify image exists
                            echo "Verifying image exists..."
                            nerdctl -n k8s.io images | grep "${REGISTRY}/udi-plus-gae" | grep "${IMAGE_TAG_DATED}"
                            echo "✅ Image built successfully"
                            echo "⚠️  Skipping container smoke tests (nested containerization not supported in Jenkins pod)"
                        """

                        echo "✅ udi-plus-gae smoke tests passed"
                    }
                }
            }
        }

        stage('Push to Harbor') {
            steps {
                container('builder') {
                    script {
                        echo "=== Push to Harbor Stage ==="
                        echo "DEBUG: IMAGES_BUILT='${env.IMAGES_BUILT}', SKIP_PUSH=${params.SKIP_PUSH}"

                        if (params.SKIP_PUSH) {
                            echo "⏭️  Skipping push (SKIP_PUSH=true)"
                            return
                        }

                        def imagesBuilt = env.IMAGES_BUILT ?: ''
                        if (imagesBuilt == '' || imagesBuilt == 'null') {
                            echo "⏭️  No images were built, skipping push"
                            return
                        }

                        withCredentials([usernamePassword(credentialsId: 'harbor-robot-registry',
                                                          passwordVariable: 'HARBOR_PASSWORD',
                                                          usernameVariable: 'HARBOR_USERNAME')]) {
                            echo "=== Pushing images to Harbor ==="
                            echo "Images to push: ${env.IMAGES_BUILT}"

                            sh '''
                                echo $HARBOR_PASSWORD | nerdctl -n k8s.io login harbor.ethosengine.com/devspaces -u $HARBOR_USERNAME --password-stdin
                            '''

                            // Test network speed to Harbor
                            sh """
                                echo "Testing network connectivity to Harbor..."
                                ping -c 3 harbor.ethosengine.com || true
                                echo ""
                                echo "Checking image sizes before push..."
                                nerdctl -n k8s.io images | grep "${REGISTRY}" | grep "${IMAGE_TAG_DATED}" || true
                            """

                            // Push all images sequentially
                            if (env.IMAGES_BUILT && env.IMAGES_BUILT.contains('ci-builder:')) {
                                echo "Pushing ci-builder..."
                                def pushStart = System.currentTimeMillis()
                                sh """
                                    nerdctl -n k8s.io push ${CI_BUILDER_REGISTRY}/ci-builder:${IMAGE_TAG_LATEST}
                                    nerdctl -n k8s.io push ${CI_BUILDER_REGISTRY}/ci-builder:${IMAGE_TAG_DATED}
                                    nerdctl -n k8s.io push ${CI_BUILDER_REGISTRY}/ci-builder:${IMAGE_TAG_GIT}
                                """
                                def pushDuration = (System.currentTimeMillis() - pushStart) / 1000
                                echo "✅ Pushed ci-builder (took ${pushDuration}s)"
                            }

                            if (env.IMAGES_BUILT && env.IMAGES_BUILT.contains('udi-plus:')) {
                                echo "Pushing udi-plus (this may take several minutes for large images)..."
                                def pushStart = System.currentTimeMillis()
                                sh """
                                    nerdctl -n k8s.io push ${REGISTRY}/udi-plus:${IMAGE_TAG_LATEST}
                                    nerdctl -n k8s.io push ${REGISTRY}/udi-plus:${IMAGE_TAG_DATED}
                                    nerdctl -n k8s.io push ${REGISTRY}/udi-plus:${IMAGE_TAG_GIT}
                                """
                                def pushDuration = (System.currentTimeMillis() - pushStart) / 1000
                                echo "✅ Pushed udi-plus (took ${pushDuration}s)"
                            }

                            if (env.IMAGES_BUILT && env.IMAGES_BUILT.contains('rust-nix-dev:')) {
                                echo "Pushing rust-nix-dev..."
                                sh """
                                    nerdctl -n k8s.io push ${REGISTRY}/rust-nix-dev:${IMAGE_TAG_LATEST}
                                    nerdctl -n k8s.io push ${REGISTRY}/rust-nix-dev:${IMAGE_TAG_DATED}
                                    nerdctl -n k8s.io push ${REGISTRY}/rust-nix-dev:${IMAGE_TAG_GIT}
                                """
                                echo "✅ Pushed rust-nix-dev"
                            }

                            if (env.IMAGES_BUILT && env.IMAGES_BUILT.contains('udi-plus-angular:')) {
                                echo "Pushing udi-plus-angular..."
                                sh """
                                    nerdctl -n k8s.io push ${REGISTRY}/udi-plus-angular:${IMAGE_TAG_LATEST}
                                    nerdctl -n k8s.io push ${REGISTRY}/udi-plus-angular:${IMAGE_TAG_DATED}
                                    nerdctl -n k8s.io push ${REGISTRY}/udi-plus-angular:${IMAGE_TAG_GIT}
                                """
                                echo "✅ Pushed udi-plus-angular"
                            }

                            if (env.IMAGES_BUILT && env.IMAGES_BUILT.contains('udi-plus-gae:')) {
                                echo "Pushing udi-plus-gae..."
                                sh """
                                    nerdctl -n k8s.io push ${REGISTRY}/udi-plus-gae:${IMAGE_TAG_LATEST}
                                    nerdctl -n k8s.io push ${REGISTRY}/udi-plus-gae:${IMAGE_TAG_DATED}
                                    nerdctl -n k8s.io push ${REGISTRY}/udi-plus-gae:${IMAGE_TAG_GIT}
                                """
                                echo "✅ Pushed udi-plus-gae"
                            }

                            echo "✅ All images pushed to Harbor"
                        }
                    }
                }
            }
        }

        stage('Harbor Security Scan') {
            steps {
                container('builder') {
                    script {
                        echo "=== Harbor Security Scan Stage ==="
                        echo "DEBUG: IMAGES_BUILT='${env.IMAGES_BUILT}', SKIP_SECURITY_SCAN=${params.SKIP_SECURITY_SCAN}"

                        if (params.SKIP_SECURITY_SCAN) {
                            echo "⏭️  Skipping security scan (SKIP_SECURITY_SCAN=true)"
                            return
                        }

                        def imagesBuilt = env.IMAGES_BUILT ?: ''
                        if (imagesBuilt == '' || imagesBuilt == 'null') {
                            echo "⏭️  No images were built, skipping security scan"
                            return
                        }

                        withCredentials([usernamePassword(credentialsId: 'harbor-robot-registry',
                                                          passwordVariable: 'HARBOR_PASSWORD',
                                                          usernameVariable: 'HARBOR_USERNAME')]) {
                            echo "=== Triggering Harbor security scans ==="

                            // Trigger scans sequentially (only for images that were pushed)
                            if (env.IMAGES_BUILT && env.IMAGES_BUILT.contains('ci-builder:')) {
                                echo "Scanning ci-builder..."
                                sh """
                                    AUTH_HEADER="Authorization: Basic \$(echo -n "\$HARBOR_USERNAME:\$HARBOR_PASSWORD" | base64)"

                                    wget --post-data="" \\
                                      --header="accept: application/json" \\
                                      --header="Content-Type: application/json" \\
                                      --header="\$AUTH_HEADER" \\
                                      -S -O- \\
                                      "https://harbor.ethosengine.com/api/v2.0/projects/ethosengine/repositories/ci-builder/artifacts/${IMAGE_TAG_DATED}/scan" || \\
                                    echo "Scan request for ci-builder submitted"
                                """
                            }

                            if (env.IMAGES_BUILT && env.IMAGES_BUILT.contains('udi-plus:')) {
                                echo "Scanning udi-plus..."
                                sh """
                                    AUTH_HEADER="Authorization: Basic \$(echo -n "\$HARBOR_USERNAME:\$HARBOR_PASSWORD" | base64)"

                                    wget --post-data="" \\
                                      --header="accept: application/json" \\
                                      --header="Content-Type: application/json" \\
                                      --header="\$AUTH_HEADER" \\
                                      -S -O- \\
                                      "https://harbor.ethosengine.com/api/v2.0/projects/devspaces/repositories/udi-plus/artifacts/${IMAGE_TAG_DATED}/scan" || \\
                                    echo "Scan request for udi-plus submitted"
                                """
                            }

                            if (env.IMAGES_BUILT && env.IMAGES_BUILT.contains('rust-nix-dev:')) {
                                echo "Scanning rust-nix-dev..."
                                sh """
                                    AUTH_HEADER="Authorization: Basic \$(echo -n "\$HARBOR_USERNAME:\$HARBOR_PASSWORD" | base64)"

                                    wget --post-data="" \\
                                      --header="accept: application/json" \\
                                      --header="Content-Type: application/json" \\
                                      --header="\$AUTH_HEADER" \\
                                      -S -O- \\
                                      "https://harbor.ethosengine.com/api/v2.0/projects/devspaces/repositories/rust-nix-dev/artifacts/${IMAGE_TAG_DATED}/scan" || \\
                                    echo "Scan request for rust-nix-dev submitted"
                                """
                            }

                            if (env.IMAGES_BUILT && env.IMAGES_BUILT.contains('udi-plus-angular:')) {
                                echo "Scanning udi-plus-angular..."
                                sh """
                                    AUTH_HEADER="Authorization: Basic \$(echo -n "\$HARBOR_USERNAME:\$HARBOR_PASSWORD" | base64)"

                                    wget --post-data="" \\
                                      --header="accept: application/json" \\
                                      --header="Content-Type: application/json" \\
                                      --header="\$AUTH_HEADER" \\
                                      -S -O- \\
                                      "https://harbor.ethosengine.com/api/v2.0/projects/devspaces/repositories/udi-plus-angular/artifacts/${IMAGE_TAG_DATED}/scan" || \\
                                    echo "Scan request for udi-plus-angular submitted"
                                """
                            }

                            if (env.IMAGES_BUILT && env.IMAGES_BUILT.contains('udi-plus-gae:')) {
                                echo "Scanning udi-plus-gae..."
                                sh """
                                    AUTH_HEADER="Authorization: Basic \$(echo -n "\$HARBOR_USERNAME:\$HARBOR_PASSWORD" | base64)"

                                    wget --post-data="" \\
                                      --header="accept: application/json" \\
                                      --header="Content-Type: application/json" \\
                                      --header="\$AUTH_HEADER" \\
                                      -S -O- \\
                                      "https://harbor.ethosengine.com/api/v2.0/projects/devspaces/repositories/udi-plus-gae/artifacts/${IMAGE_TAG_DATED}/scan" || \\
                                    echo "Scan request for udi-plus-gae submitted"
                                """
                            }

                            echo "✅ Security scans initiated"
                            echo "Check Harbor UI for scan results"
                        }
                    }
                }
            }
        }

        stage('Archive Build Info') {
            steps {
                container('builder') {
                    script {
                        def imagesBuilt = env.IMAGES_BUILT ?: ''
                        if (imagesBuilt == '' || imagesBuilt == 'null') {
                            echo "⏭️  No images were built, skipping build info archive"
                            return
                        }

                        def metadata = """# DevSpaces Image Build Metadata
BUILD_DATE=${new Date()}
GIT_HASH=${env.GIT_HASH}
IMAGE_TAG_DATED=${env.IMAGE_TAG_DATED}
IMAGE_TAG_GIT=${env.IMAGE_TAG_GIT}
BASE_IMAGE=${env.BASE_IMAGE}
IMAGES_BUILT=${env.IMAGES_BUILT}

# Individual Image Tags
"""
                        if (params.BUILD_CI_BUILDER) {
                            metadata += "CI_BUILDER=${CI_BUILDER_REGISTRY}/ci-builder:${IMAGE_TAG_DATED}\n"
                        }
                        if (params.BUILD_UDI_PLUS && env.SKIP_UDI_PLUS_BUILD != 'true') {
                            metadata += "UDI_PLUS=${REGISTRY}/udi-plus:${IMAGE_TAG_DATED}\n"
                        }
                        if (params.BUILD_RUST) {
                            metadata += "RUST_NIX_DEV=${REGISTRY}/rust-nix-dev:${IMAGE_TAG_DATED}\n"
                        }
                        if (params.BUILD_ANGULAR) {
                            metadata += "UDI_PLUS_ANGULAR=${REGISTRY}/udi-plus-angular:${IMAGE_TAG_DATED}\n"
                        }
                        if (params.BUILD_GAE) {
                            metadata += "UDI_PLUS_GAE=${REGISTRY}/udi-plus-gae:${IMAGE_TAG_DATED}\n"
                        }

                        writeFile file: 'build-metadata.env', text: metadata
                        archiveArtifacts artifacts: 'build-metadata.env', allowEmptyArchive: false

                        echo "Build metadata archived"
                    }
                }
            }
        }
    }

    post {
        always {
            script {
                container('builder') {
                    script {
                        echo '=== Cleanup: Removing images from this build ==='

                        // Safety: Only clean if we have tag info (prevents wild deletions)
                        if (!env.IMAGE_TAG_DATED || !env.IMAGE_TAG_GIT) {
                            echo '⚠️  No image tags found, skipping cleanup (safety check)'
                            return
                        }

                        echo "This cleanup will ONLY remove images built in this pipeline run"
                        echo "Tags to remove: latest, ${env.IMAGE_TAG_DATED}, ${env.IMAGE_TAG_GIT}"

                        sh """
                            set +e

                            echo "=== Images that will be removed ==="
                            nerdctl -n k8s.io images | grep -E "(${IMAGE_TAG_DATED}|${IMAGE_TAG_GIT})" || echo "None found"
                            echo ""

                            echo "Removing images from this build..."

                            # ci-builder images
                            nerdctl -n k8s.io rmi ${CI_BUILDER_REGISTRY}/ci-builder:${IMAGE_TAG_LATEST} 2>/dev/null || true
                            nerdctl -n k8s.io rmi ${CI_BUILDER_REGISTRY}/ci-builder:${IMAGE_TAG_DATED} 2>/dev/null || true
                            nerdctl -n k8s.io rmi ${CI_BUILDER_REGISTRY}/ci-builder:${IMAGE_TAG_GIT} 2>/dev/null || true

                            # udi-plus images
                            nerdctl -n k8s.io rmi ${REGISTRY}/udi-plus:${IMAGE_TAG_LATEST} 2>/dev/null || true
                            nerdctl -n k8s.io rmi ${REGISTRY}/udi-plus:${IMAGE_TAG_DATED} 2>/dev/null || true
                            nerdctl -n k8s.io rmi ${REGISTRY}/udi-plus:${IMAGE_TAG_GIT} 2>/dev/null || true

                            # rust-nix-dev images
                            nerdctl -n k8s.io rmi ${REGISTRY}/rust-nix-dev:${IMAGE_TAG_LATEST} 2>/dev/null || true
                            nerdctl -n k8s.io rmi ${REGISTRY}/rust-nix-dev:${IMAGE_TAG_DATED} 2>/dev/null || true
                            nerdctl -n k8s.io rmi ${REGISTRY}/rust-nix-dev:${IMAGE_TAG_GIT} 2>/dev/null || true

                            # udi-plus-angular images
                            nerdctl -n k8s.io rmi ${REGISTRY}/udi-plus-angular:${IMAGE_TAG_LATEST} 2>/dev/null || true
                            nerdctl -n k8s.io rmi ${REGISTRY}/udi-plus-angular:${IMAGE_TAG_DATED} 2>/dev/null || true
                            nerdctl -n k8s.io rmi ${REGISTRY}/udi-plus-angular:${IMAGE_TAG_GIT} 2>/dev/null || true

                            # udi-plus-gae images
                            nerdctl -n k8s.io rmi ${REGISTRY}/udi-plus-gae:${IMAGE_TAG_LATEST} 2>/dev/null || true
                            nerdctl -n k8s.io rmi ${REGISTRY}/udi-plus-gae:${IMAGE_TAG_DATED} 2>/dev/null || true
                            nerdctl -n k8s.io rmi ${REGISTRY}/udi-plus-gae:${IMAGE_TAG_GIT} 2>/dev/null || true

                            echo ""
                            echo "=== Remaining devspaces images (other builds) ==="
                            nerdctl -n k8s.io images | grep devspaces || echo "None"

                            echo ""
                            echo "Disk usage:"
                            df -h / | head -2
                        """

                        echo '✅ Cleanup completed - only removed images from this build'
                    }
                }
            }
        }
        success {
            script {
                echo "======================================"
                echo "✅ Pipeline completed successfully"
                echo "======================================"
                echo "Images built: ${env.IMAGES_BUILT ?: 'none'}"
                echo "Image tag (dated): ${env.IMAGE_TAG_DATED ?: 'n/a'}"
                echo "Git hash: ${env.GIT_HASH ?: 'n/a'}"
                echo "======================================"
            }
        }
        failure {
            script {
                echo '======================================'
                echo '❌ Pipeline failed'
                echo '======================================'
                echo "Images built before failure: ${env.IMAGES_BUILT ?: 'none'}"
                echo "Failed at image tag: ${env.IMAGE_TAG_DATED ?: 'n/a'}"
                echo 'Check the logs for details'
                echo 'All local images have been cleaned up'
                echo '======================================'
            }
        }
        aborted {
            script {
                echo '======================================'
                echo '⚠️  Pipeline was aborted'
                echo '======================================'
                echo "Images built before abort: ${env.IMAGES_BUILT ?: 'none'}"
                echo 'All local images have been cleaned up'
                echo '======================================'
            }
        }
        unstable {
            script {
                echo '======================================'
                echo '⚠️  Pipeline completed with warnings'
                echo '======================================'
                echo "Images built: ${env.IMAGES_BUILT ?: 'none'}"
                echo 'Check logs for warnings'
                echo '======================================'
            }
        }
    }
}
